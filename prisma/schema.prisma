generator client {
  provider = "prisma-client-js" // Generates the Prisma Client, which lets you use Prisma in JavaScript/TypeScript.
}

datasource db {
  provider = "sqlite" // Database provider is set to SQLite (you could replace this with PostgreSQL, MySQL, etc., if needed).
  url      = env("DATABASE_URL") // The database URL, stored in an environment variable.
}

model User {
  id               Int       @id @default(autoincrement()) // Primary key, auto-incremented integer
  email            String    @unique // Unique email field
  name             String? // Optional name field
  password         String // Password field
  friends          User[]    @relation("UserFriends") // Self-referencing many-to-many relationship for friendships
  friendOf         User[]    @relation("UserFriends") // The other side of the friendship relationship
  posts            Post[] // One-to-many relationship with Post
  sentMessages     Message[] @relation("SentMessages") // Messages sent by the user
  receivedMessages Message[] @relation("ReceivedMessages") // Messages received by the user
  Message          Message[]
}

model Post {
  id        Int      @id @default(autoincrement()) // Primary key, auto-incremented integer
  title     String // Title of the post
  content   String? // Optional content field
  published Boolean? @default(false) // Published status with a default value of false
  author    User?    @relation(fields: [authorId], references: [id]) // Relationship to the User model
  authorId  Int? // Foreign key for the author (optional)
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  timestamp  DateTime @default(now())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}
